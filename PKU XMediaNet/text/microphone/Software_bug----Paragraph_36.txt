Given a bug is impairing a user scenario, one can easily see the impact the bug has. This impact may be tangible as tangible as of data loss, immediate losses in terms of money, or may be indirect â€“ loss of goodwill or man hours, and eventually business. This impact is said to be the severity of a bug: "the impact a bug causes when encountered by users". Thus, severity, as a software metric does have a very precise meaning. Unfortunately, severity levels are not standardized in industry and are decided by each software producer, if they are even used. This is because impacts differ across the industry. A crash in a video game has a totally different impact than a crash in the browser, or real time monitoring system. Irrespective of that, crashes would be generally categorised high severity in the respective fields. For example, bug severity levels might be "crash or hang", "no workaround" (meaning there is no way the customer can accomplish a given task), "has workaround" (meaning there is a way for the user to recover and accomplish the task), "UI" or "visual defect" (for example, a missing image or displaced button or form element), or "documentation error". Some software publishers use more qualified severities such as "critical", "high", "low," "blocker," or "trivial". The severity of a bug may be a separate category to its priority for fixing, and the two may be quantified and managed separately.